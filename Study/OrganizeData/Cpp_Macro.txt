[ C++ 메크로 ]

매크로를 정의하는 경우에는 컴파일이 되면 해당 매크로 이름을 가진 것들이 지정해놓은 값으로 변해서 컴파일 됩니다.
#define으로 시작되는 전처리 문장을 매크로라고 하며 이를 사용하여 매크로(메크로 상수, 메크로 함수)를 만들 수 있습니다.





{ 메크로 상수 }

#define [이름] [숫자]

여러번 사용하게 될 상수를 문자로 표현하여 변경시에도 편리하게 사용할 수 있도록 하는 것.
매크로 상수는 컴파일 전에 전처리기에 의해서 숫자로 치환 됩니다.

#define MAX_LEN 20





{ 메크로 함수 }

#define [함수이름](매개변수, 매개변수)  [계산]

매크로 함수는 함수처럼 매개변수를 설정할 수 있는 매크로를 의미한다.
매크로 함수라고 부르지만 단순히 치환하기만 하므로 실제로 함수는 아니다.
( 예상하는 결과값과 다른 경우가 존재 )
함수 선언과 비슷하지만 매크로 함수는 매개변수와 매개변수에 넘어오는 인수의 자료형을 신경 쓰지 않습니다.
( #define 은 전처리기 영역에서 단순 치환이기 때문에 컴파일에서 발생하는 데이터 타입에 관한 문제는 발견하지 못한다. )
즉, 자료형의 독립성을 보장합니다. 또 매크로 함수 내부에서 자기 자신을 호출할 수 없다는 특징이 있습니다. (재귀호출 불가)

#define ADD(x,y) x + y


{ 전처리기 연산자 }

# 연산자 (toString 연산자) -> #define ADD(x,y) #x "+" #y -> ADD(10, 20) -> 10+20

## 연산자 (토큰 결합 연산자) -> #define CONCAT(x,y,z) x ## y ## z -> CONCAT(10, 20, 30)  -> 102030





{ 매크로 함수와 인라인 함수의 차이점 }


inline 함수의 경우

컴파일 단계(Compiling)에서 처리가 이루어집니다. (인라인 하느냐 vs 안되느냐)
일반적인 함수들을 위해 실행하는 타입 검사가 그대로 적용됩니다.
 

macro 확장자의 경우 

전처리 단계(Preprocessing)에서 치환이 이루어집니다.
대치 시 어떠한 타입 검사도 이루어지지 않습니다.