{ C++ 클래스 상속 }




[ 정의 ]


C++에서 클래스 상속이란 기존에 정의되어 있는 클래스의 접근할 수 있는 모든 멤버 변수와 멤버 함수를 물려받아,
새로운 클래스를 작성하는 것을 의미한다.

이때 기존에 정의되어 있던 클래스를 기초 클래스(base class) 또는 부모 클래스(parent class),
상위 클래스(super class)라고 한다.

그리고 상속을 통해 새롭게 작성되는 클래스를 파생 클래스(derived class) 또는 자식 클래스(child class),
하위 클래스(sub class)라고도 한다.




[ 장점 ]


기존에 작성된 클래스를 재활용할 수 있다.

공통적인 부분은 기초 클래스에 미리 작성하여, 파생 클래스에서 중복되는 부분을 제거할 수 있다.




[ 파생 클래스 ( 자식 클래스 ) ]


파생 클래스(derived class)란 기초 클래스의 모든 특성을 물려받아 새롭게 작성된 클래스를 가리킨다.

[파생 클래스 선언 CODE]
-----------------------------------------------------------------------------------------------------
class 파생클래스이름 : 접근제어지시자 기초클래스이름[, 접근제어지시자 기초클래스이름, ...]
{

    // 파생 클래스 멤버 리스트

}
-----------------------------------------------------------------------------------------------------

파생 클래스는 반드시 자신만의 생성자를 작성해야 합니다.
파생 클래스에는 기초 클래스의 접근할 수 있는 모든 멤버 변수들이 저장됩니다.
파생 클래스는 기초 클래스의 접근할 수 있는 모든 멤버 함수를 사용할 수 있습니다.
파생 클래스에는 필요한 만큼 멤버를 추가할 수 있습니다.

파생 클래스의 생성자는 기초 클래스의 생성자를 사용한다.
그 이유는 파생 클래스의 생성자가 기초 클래스의 private 멤버에 접근할 수 없기 때문이고,
따라서 기초 클래스의 생성자를 사용해야만 기초 클래스의 private 멤버를 초기화할 수 있습니다.
( 파생 클래스는 기초 클래스의 프라이빗 맴버에 접근할 수 없기 때문에 접근할 수 있는 기초 클래스의 맴버 변수들만 자기 자신에게 저장한다. )
이때 기초 클래스의 생성자를 명시하지 않으면, 프로그램은 기초 클래스의 디폴트 생성자를 사용하게 됩니다.

파생 클래스의 객체를 생성하면, 프로그램은 제일 먼저 기초 클래스의 생성자를 호출합니다.
이때 기초 클래스 생성자는 상속받은 멤버 변수의 초기화를 진행합니다.
그리고서 파생 클래스의 생성자가 호출됩니다.
반대로 파생 클래스의 수명이 다하면, 먼저 파생 클래스의 소멸자가 호출되고, 그 후에 기초 클래스의 소멸자가 호출됩니다.

( 이유를 추론해 보자면 보통 기초 클래스에서는 파생 클래스의 맴버 참조가 없는데 반해, 파생 클래스에서는 부모 클래스의 맴버에 대한 참조가 있기 때문에 혹시 모를 에러 발생을 없애기 위해 기초 클래스가 파생 클래스 보다 먼저 생기고, 나중에 파괴되는 것이 아닐까 한다.)











[ 주의할 점 ]


두 생성자 전부 디폴트 생성자 라는 가정 하에
부모 클래스와 파생 클래스 둘 다 생성자를 선언하고 정의하지 않으면 컴파일러가 둘 다 추가해준 뒤 파생 클래스의 디폴트 생성자에 부모 클래스의 디폴트 생성자를 상속 시킨다.
부모 클래스만 디폴트 생성자를 선언, 정의를 하고 파생 클래스는 안 하면 알아서 컴파일러가 파생 클래스에도 추가해준 뒤 파생 클래스의 디폴트 생성자에 부모 클래스의 디폴트 생성자를 상속 시킨다.
파생 클래스만 디폴트 생성자를 선언, 정의를 하고 부모는 안 하면 알아서 컴파일러가 부모 클래스에도 추가해준 뒤 파생 클래스의 디폴트 생성자에 부모 클래스의 디폴트 생성자를 상속 시킨다.

하지만

부모 클래스에 디폴트 생성자가 없고, 다른 사용자 정의 생성자가 있을 경우 무조건 파생 클래스에서 생성자를 선언한 후 정의 부에서 부모 클래스 생성자 상속을 해줘야한다.
( 즉, 무조건 자식 클래스에서 생성자를 만들어야 한다.)
부모 클래스에 디폴트 생성자가 선언과 정의가 되어 있는 경우에는 파생 클래스에서 생성자 상속을 하지 않아도 자동으로 부모 클래스의 디폴트 생성자를 상속 받기 때문에 정상 작동된다.





